import pandas as pd
import numpy as np
from scipy import stats
from sklearn.model_selection import train_test_split
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.preprocessing import MinMaxScaler
import pickle
import time

# Liear algebra task krnn
# Data set eke thin ewa ape data kiyn variable ekt gann
"""resturantRatingPredictionBySavindu.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1zje_Qa5F9uc0_AZGa5EudgzcMLHqZTXw
"""


class Resturantratingpredictionbysavindu:
    def predictFunctionjjj(self, vote, avg, table, delivery, price):
        data_set = pd.read_csv("savinduResturantDataSet.csv")
        time.sleep(2)

        def coulum_separated_counter_function(input_string_as_colum_name):
            new_colums = len(str(input_string_as_colum_name).split(","))
            return new_colums

        data_set["CuisineCount"] = data_set["Cuisines"].apply(
            coulum_separated_counter_function
        )
        data_set.isnull().sum()

        unwanted_culumns = [
            "RestaurantID",
            "RestaurantName",
            "City",
            "Address",
            "Locality",
            "LocalityVerbose",
            "Cuisines",
        ]
        new_data_set = data_set.drop(unwanted_culumns, axis=1)

        selected_columns_for_ml = [
            "Votes",
            "Average_Cost_for_two",
            "Has_Table_booking",
            "Has_Online_delivery",
            "Price_range",
        ]
        DataForModel = new_data_set[selected_columns_for_ml]

        DataForModel.to_pickle("DataForModel.pkl")

        DataForModel["Has_Table_booking"].replace({"Yes": 1, "No": 0}, inplace=True)
        DataForModel["Has_Online_delivery"].replace({"Yes": 1, "No": 0}, inplace=True)

        DataForModelNumeric = pd.get_dummies(DataForModel)
        DataForModelNumeric["Rating"] = new_data_set["Rating"]

        zValue = np.abs(stats.zscore(DataForModelNumeric))
        withOutOutLiyers_data_set = DataForModelNumeric[(zValue < 5).all(axis=1)]

        TargetVariable = "Rating"
        Predictors = [
            "Votes",
            "Average_Cost_for_two",
            "Has_Table_booking",
            "Has_Online_delivery",
            "Price_range",
        ]

        x = DataForModelNumeric[Predictors].values
        y = DataForModelNumeric[TargetVariable].values

        scaler = MinMaxScaler(feature_range=(0, 10))
        transformed_data_set = scaler.fit_transform(x)

        #                        Machin Learning Model ExtraTree Regression
        # Data model ek train / Test kiyl kali dekkkt wen krnn
        #
        x_train, x_test, y_train, y_test = train_test_split(
            x, y, test_size=0.3, random_state=10
        )
        # Prepar krnw Extra Tree Regression
        ET_Model = ExtraTreesRegressor(n_estimators=120)
        ET_Model.fit(x_train, y_train)
        y_predict = ET_Model.predict(x_test)

        #  Save krnw model ek disk ekt actual values dala test krnn puluwn wenn
        #  model ek actual data dala prectict krl result kr
        pickle.dump(ET_Model, open("model.pkl", "wb"))
        model = pickle.load(open("model.pkl", "rb"))
        #                                       Actual Data Da/A test krnw
        Predictors = [
            "Votes",
            "Average_Cost_for_two",
            "Has_Table_booking",
            "Has_Online_delivery",
            "Price_range",
        ]
        # new_samples_data=pd.DataFrame(data=[[591,1200,1,0,3],[10,4000,1,0,4]],columns=Predictors);
        # function eke parameeter valuetik damma
        new_samples_data = pd.DataFrame(
            data=[[vote, avg, table, delivery, price]], columns=Predictors
        )
        model = pickle.load(open("model.pkl", "rb"))
        result = model.predict(new_samples_data)

        # print(result);
        return result


# if __name__ == "__main__":
#    main();
